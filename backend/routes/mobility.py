# backend/routers/mobility.py
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from pydantic import BaseModel
from typing import List
from .. import database
from .. import schemas, crud
from ..database import get_db


router = APIRouter(prefix="/mobility", tags=["mobility"])

# üìå ÏùëÎãµ Ïä§ÌÇ§Îßà
class ModeSavingResponse(BaseModel):
    mode: str
    saved_g: float


@router.get("/stats/mode/{user_id}", response_model=List[ModeSavingResponse])
def get_mode_stats(user_id: int, db: Session = Depends(database.get_db)):
    """
    mobility_logs ÌÖåÏù¥Î∏îÏóêÏÑú user_id Í∏∞Ï§ÄÏúºÎ°ú
    ÍµêÌÜµÏàòÎã®Î≥Ñ Ï†àÍ∞êÎüâ(co2_saved_g Ìï©Í≥Ñ)ÏùÑ Î∞òÌôò
    """
    query = """
        SELECT mode,
               SUM(co2_saved_g) AS saved_g
        FROM mobility_logs
        WHERE user_id = :user_id
        GROUP BY mode
    """
    rows = db.execute(query, {"user_id": user_id}).fetchall()

    return [{"mode": row[0], "saved_g": float(row[1])} for row in rows]


# üìå ÏùºÎ≥Ñ Ï†àÍ∞êÎüâ Ï°∞Ìöå API
@router.get("/stats/daily/{user_id}", response_model=List[schemas.DailySavingResponse])
def get_daily_savings(user_id: int, db: Session = Depends(get_db)):
    """
    mobility_logs ÌÖåÏù¥Î∏îÏóêÏÑú user_id Í∏∞Ï§ÄÏúºÎ°ú
    ÏµúÍ∑º 7ÏùºÍ∞Ñ ÏùºÎ≥Ñ Ï†àÍ∞êÎüâ(co2_saved_g Ìï©Í≥Ñ)ÏùÑ Î∞òÌôò
    """
    query = """
        SELECT DATE(created_at) AS ymd,
               SUM(co2_saved_g) AS saved_g
        FROM mobility_logs
        WHERE user_id = :user_id
          AND created_at >= CURDATE() - INTERVAL 7 DAY
        GROUP BY DATE(created_at)
        ORDER BY ymd ASC
    """
    rows = db.execute(query, {"user_id": user_id}).fetchall()

    # Í≤∞Í≥ºÎ•º JSON ÏßÅÎ†¨Ìôî Í∞ÄÎä•Ìïú dictÎ°ú Î≥ÄÌôò
    return [{"ymd": row[0], "saved_g": float(row[1])} for row in rows]

# ÏµúÍ∑º 7Ïùº Ï†àÍ∞êÎüâ
@router.get("/stats/daily/{user_id}", response_model=list[schemas.DailySavingResponse])
def get_daily_stats(user_id: int, db: Session = Depends(get_db)):
    rows = db.execute(
        """
        SELECT DATE(created_at) AS ymd, SUM(co2_saved_g) AS saved_g
        FROM mobility_logs
        WHERE user_id = :user_id
          AND created_at >= CURDATE() - INTERVAL 7 DAY
        GROUP BY DATE(created_at)
        ORDER BY ymd ASC
        """,
        {"user_id": user_id}
    ).fetchall()

    return [{"date": str(r[0]), "saved_g": float(r[1])} for r in rows]

# ÍµêÌÜµÏàòÎã®Î≥Ñ Ï†àÍ∞ê ÎπÑÏú®
@router.get("/stats/mode/{user_id}", response_model=list[schemas.ModeStatResponse])
def get_mode_stats(user_id: int, db: Session = Depends(get_db)):
    rows = db.execute(
        """
        SELECT mode, SUM(co2_saved_g) AS saved_g
        FROM mobility_logs
        WHERE user_id = :user_id
        GROUP BY mode
        """,
        {"user_id": user_id}
    ).fetchall()

    return [{"mode": r[0], "saved_g": float(r[1])} for r in rows]